var fs = require('fs');
var glob = require('glob');
var Helpers = require('./helpers/utils');

var sassGlobbing;

var SassGlobbing = function (obj) {
	this.options = {
		sassRoot: 'tmp',
		imports: [],
		output: 'styles.tmp.scss',
		hint: false
	};

	this.options = Helpers.extend(this.options, obj);
	this.options.sassRoot = this.options.sassRoot.replace(/\/$/, "");
	this.output = this.options.sassRoot + '/' + this.options.output;
};

SassGlobbing.prototype.compiled = function (cb) {
	var _this = this;
	var hint = '// This file is generated by sass-globber.\n' +
		'// Do not edit this file manually!\n' +
		'// Just add your styles/imports to your config.\n\n';
	var data = this.options.hint !== false ? this.options.hint : hint;
	data = data + this.getFiles();

	Helpers.write(this.output, data, function () {
		if (cb && typeof (cb) === "function") cb();
	});
};

SassGlobbing.prototype.getFiles = function () {
	var _this = this;

	var allImports = [];
	this.options.imports.forEach(function (line) {
		var files = glob.sync(_this.options.sassRoot + '/' + line);
		var imports = _this.getImports(files);

		allImports = allImports.concat(imports);
	});

	return allImports.join("\n") + "\n";
};

SassGlobbing.prototype.getImports = function (files) {
	var _this = this;
	var tmpContent = [];

	files.forEach(function (matchedFile) {
		if (fs.statSync(matchedFile).isFile()) {
			var matched = matchedFile.replace(_this.options.sassRoot + '/', '');
			matched = matched.replace(/\.scss|\.sass/mg, '');

			tmpContent.push('@import "' + matched + '";');
		}
	});

	return tmpContent;
};

sassGlobbing = function (opts) {
	return new SassGlobbing(opts);
};

sassGlobbing.compiled = function (opts, cb) {
	return sassGlobbing(opts).compiled(cb);
};

module.exports = sassGlobbing;
